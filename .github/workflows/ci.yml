name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build-container:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    outputs:
      image_tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Prepare Docker
        id: set_tag
        run: |
          IMAGE_REPOSITORY=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          TAG="ghcr.io/${IMAGE_REPOSITORY}/devimage:${GITHUB_SHA}"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build and push devcontainer image with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile
          push: true
          tags: ${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint-client:
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-container.outputs.image_tag }}
    needs: build-container
    steps:
      - run: echo "Lint client"

  build-client:
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-container.outputs.image_tag }}
    needs: [build-container, lint-client]
    steps:
      - run: echo "Build client"

  unit-test-client:
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-container.outputs.image_tag }}
    needs: [build-container, build-client]
    steps:
      - run: echo "Unit test client"

  lint-server:
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-container.outputs.image_tag }}
    needs: [build-container, build-container]
    steps:
      - run: echo "Lint server"

  build-server:
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-container.outputs.image_tag }}
    needs: [build-container, lint-server]
    steps:
      - run: echo "Build server"

  unit-test-server:
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-container.outputs.image_tag }}
    needs: [build-container, build-server]
    steps:
      - run: echo "Unit test server"

  create-server-runtime:
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-container.outputs.image_tag }}
    needs: [build-container, unit-test-server]
    steps:
      - run: echo "Create server runtime container"

  e2e-test:
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-container.outputs.image_tag }}
    needs: [build-container, unit-test-client, unit-test-server]
    steps:
      - run: echo "Run E2E tests"

  deploy-client:
    runs-on: ubuntu-latest
    needs: e2e-test
    if: github.event_name == 'push'
    steps:
      - run: echo "Deploy client"

  deploy-server:
    runs-on: ubuntu-latest
    needs: [e2e-test, create-server-runtime]
    if: github.event_name == 'push'
    steps:
      - run: echo "Deploy server"
